@page "/"
@inject IJSRuntime JsRuntime;
@using System.Reflection;
@using System.Threading;
@using MiniCAS.Core.Syntax;
@using MiniCAS.Core.Expr;
<form @onsubmit="submit">
    <div id="outer-screen">
        <div id="inner-screen">
            <div id="output-outer">
                <div id="output">
                    <div>
                        @name Versión @version<br />
                        @descripcion<br />
                        <a href="https://github.com/bugbit/MiniCAS">https://github.com/bugbit/MiniCAS</a><br />
                        MIT LICENSE
                    </div>
                    <div>
                        <Latex Value="\frac{\cancel{b}}{\cancel{b}}"></Latex>
                    </div>
                    <div>
                        <ol>
                            @foreach (var r in results)
                            {
                                <li><Result In=@(r._in) Out=@(r._out) oneditIn="result_editIn"></Result></li>
                            }
                        </ol>
                    </div>
                </div>
            </div>
            <div id="blank-line">
                <div>
                    <Latex Value=@expr_latex></Latex>
                </div>
                @if (showError)
                {
                    <div>
                        <div class="error">@errorStr</div>
                        @if (!string.IsNullOrWhiteSpace(linError))
                        {
                            <div>@((MarkupString)linError)</div>
                        }
                    </div>
                }
                <div>
                    &nbsp;
                </div>
            </div>
            <div id="input-row">
                <div>
                    <div id="cmds">
                        <div class="cmds-elem">
                            <input class="btn btn-secondary" type="button" value="cancelar" disabled=@(!calculating && expr_ok ) @onclick="cancel_click" />
                        </div>
                        <div class="cmds-elem">
                            <input class="btn btn-primary" type="submit" value="calcular" disabled=@(calculating || !expr_ok ) />
                        </div>
                        @if (showdec)
                        {
                            <div class="cmds-elem">
                                <input id="numdec" type="number" min="0" disabled=@calculating @bind-value=@numdec />
                            </div>
                        }
                        <div class="cmds-elem">
                            <input id="chkshowdec" type="checkbox" class="form-check-input" checked=@showdec @onchange=@(e => showdec = (bool)e.Value) disabled=@calculating />
                            <label for="chkshowdec" class="form-check-label">Mostrar números decimales</label>
                        </div>
                    </div>
                </div>
                <div>
                    <textarea @ref="ref_expr" id="input" required class="form-control" rows="1" style="resize:none;" disabled=@calculating @bind=@expr @oninput="expr_input" />
                </div>
            </div>
        </div>
    </div>
</form>

@code
{
    private ElementReference ref_expr;
    private CancellationTokenSource tokencancel_input = null;
    private CancellationTokenSource tokencancel_submit = null;
    private string name;
    private string version;
    private string descripcion;
    private bool showdec = false;
    private int numdec = 3;
    private string expr;
    private string expr_latex;
    private bool expr_ok;
    private bool calculating;
    private bool showError;
    private string errorStr;
    private string linError;
    private bool setFocusExpr = true;
    private object _locktokencancel_input = new object();
    private object _locktokencancel_submit = new object();
    private List<(Expr _in, Expr _out)> results = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var pAssembly = typeof(Index).Assembly;
        var pAttrs = pAssembly.GetCustomAttributes(false);

        name = pAttrs.OfType<AssemblyTitleAttribute>().First().Title;
        version = pAssembly.GetName().Version.ToString();
        descripcion = pAttrs.OfType<AssemblyDescriptionAttribute>
            ().First().Description;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (setFocusExpr)
        {
            await ref_expr.FocusAsync();
            setFocusExpr = false;
        }

        if (!firstRender)
            return;

        await JsRuntime.InvokeVoidAsync("minicas.setautoexpand", ref_expr);
    }

    private async Task SetExpr(string _expr)
    {
        expr_ok = false;

        CancellationTokenSource t = null;

        lock (_locktokencancel_input)
        {
            t = tokencancel_input;
            if (t != null && !t.IsCancellationRequested)
                t.Cancel();

            t = tokencancel_input = new CancellationTokenSource();
        };

        expr = Convert.ToString(_expr);
        expr_latex = (await Parser.ParseToLatex(expr, t.Token)).ToString();
        expr_ok = !string.IsNullOrWhiteSpace(expr);
    }

    private async Task expr_input(ChangeEventArgs e)
    {
        //        await JsRuntime.InvokeVoidAsync("eval", @"(function() {
        //input.style.height='auto';
        //input.style.height=(input.scrollHeight)+'px';
        //})()");

        await SetExpr(Convert.ToString(e.Value));
    }

    private async Task submit()
    {
        cancel_click();

        var posErr = (int?)null;
        Expr _in = null;
        Expr _out = null;
        CancellationTokenSource t = null;

        lock (_locktokencancel_submit)
        {
            tokencancel_submit = t = new CancellationTokenSource();
        }

        showError = false;
        errorStr = linError = string.Empty;
        calculating = true;
        try
        {
            _in = await Parser.Parse(expr, t.Token);
            _out = _in;
            //await Task.Delay(4000, t.Token);
        }
        catch (OperationCanceledException)
        {
        }
        catch (STException ex)
        {
            showError = true;
            errorStr = string.Format("{0} en la línea {1} columna {2}", ex.Message, ex.Line, ex.Column);
            posErr = ex.Position;
        }
        catch (Exception ex)
        {
            showError = true;
            errorStr = ex.Message;
        }
        finally
        {
            calculating = false;
        }
        await ref_expr.FocusAsync();
        if (posErr.HasValue)
        {
            linError = $"{expr.Substring(0, posErr.Value)}<mark>{expr[posErr.Value]}</mark>{expr.Substring(posErr.Value + 1)}";
            await JsRuntime.InvokeVoidAsync("minicas.setSelectionRange", ref_expr, posErr.Value, posErr.Value + 1);
        }
        else if (_in != null && _out != null)
        {
            expr_latex = expr = null;
            expr_ok = false;
            results.Add(new(_in, _out));
        }
        setFocusExpr = true;
        //if (expr.Length >= 3)
        //{
        //    expr_ok = false;
        //    showError = true;
        //    errorStr = "sintaxis error en la línea 1 columna 3";
        //    linError = $"{expr.Substring(0, 2)}<mark>{expr[2]}</mark>{expr.Substring(3)}";

        //    await JsRuntime.InvokeVoidAsync("minicas.setSelectionRange", ref_expr, 2, 3);
        //}
    }

    private void cancel_click()
    {
        CancellationTokenSource t = null;

        lock (_locktokencancel_submit)
        {
            t = tokencancel_input;
            if (t != null && !t.IsCancellationRequested)
                t.Cancel();

            tokencancel_submit = null;
        };
    }

    private async Task result_editIn(Expr e)
    {
        if (e != null)
        {
            await SetExpr(e.ToString());
            setFocusExpr = true;
            StateHasChanged();
        }
    }
}
