@inject IJSRuntime JsRuntime;
@((MarkupString)Output)

@code {
    [Parameter] public bool Display { get; set; } = true;
    [Parameter] public string Value { get; set; }
    [Parameter] public EventCallback<string> OutputChanged { get; set; }

    public string Output { get; private set; }

    private bool hasRendered = false;

    protected async override Task OnParametersSetAsync()
    {
        if (hasRendered)
            await ProcessValueAsync();

        await base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ProcessValueAsync();
            hasRendered = true;
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task ProcessValueAsync()
    {
        var result = (!string.IsNullOrWhiteSpace(Value)) ? await JsRuntime.InvokeAsync<string>("window.minicas.processLatex", Value, Display) : "";

        if (!string.Equals(Output, result))
        {
            Output = result;
            await OutputChanged.InvokeAsync(result);
            StateHasChanged();
        }
    }
}
